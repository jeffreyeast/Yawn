<!--Copyright (c) 2020 Jeff East
    Licensed under the Code Project Open License (CPOL) 1.02-->
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:ctl="clr-namespace:System.Windows.Controls;assembly=presentationframework"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Yawn"
    xmlns:res="clr-namespace:Yawn.Properties">

    <local:NullTestConverter x:Key="NullTestConverter"/>
    <local:EnumerationConverter x:Key="EnumerationConverter"/>
    <local:CollectionStatusToBoolConverter x:Key="CollectionStatusToBoolConverter"    />
    <local:TabPositionConverter x:Key="TabPositionConverter"/>

    <BitmapImage x:Key="CloseImage" UriSource="pack://application:,,,/Yawn;component/Images/Close_16x.png"/>
    <BitmapImage x:Key="GlyphDownImage" UriSource="pack://application:,,,/Yawn;component/Images/GlyphDown_16x.png"/>
    <BitmapImage x:Key="GlyphLeftImage" UriSource="pack://application:,,,/Yawn;component/Images/GlyphLeft_16x.png"/>
    <BitmapImage x:Key="MaximizeImage" UriSource="pack://application:,,,/Yawn;component/Images/OutlineBorder_16x.png"/>
    <BitmapImage x:Key="MinimizeImage" UriSource="pack://application:,,,/Yawn;component/Images/Minimize_16x.png"/>
    <BitmapImage x:Key="OverflowDropdownImage" UriSource="pack://application:,,,/Yawn;component/Images/OverflowDropdown_16x.png"/>
    <BitmapImage x:Key="PushpinImage" UriSource="pack://application:,,,/Yawn;component/Images/Pushpin_16x.png"/>
    <BitmapImage x:Key="PushpinUnpinImage" UriSource="pack://application:,,,/Yawn;component/Images/PushpinUnpin_16x.png"/>
    <BitmapImage x:Key="RestoreImage" UriSource="pack://application:,,,/Yawn;component/Images/PropertyBrushGroup_16x.png"/>
    <BitmapImage x:Key="SimpleCloseImage" UriSource="pack://application:,,,/Yawn;component/Images/SimpleClose_16x.png"/>

    <ObjectDataProvider x:Key="DockEnumeration" MethodName="GetValues" ObjectType="{x:Type sys:Enum}">
        <ObjectDataProvider.MethodParameters >
            <x:Type TypeName="local:TabPositions" />
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>

    <ControlTemplate x:Key="PinnableDockTab">
        <!--DataContext is set to the DockableContentContext object (the Item in the DockTabCollection ItemsControl)-->
        <Border BorderBrush="{x:Null}" Background="{TemplateBinding Background}"
                Tag="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}}">
            <Border.Style>
                <Style TargetType="Border">
                    <Setter Property="BorderThickness" Value="1"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:DockingTab}, Path=DockTabCollection.TabPosition}" Value="Bottom">
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="Margin" Value="0,-1,0,0"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
            <Border.ContextMenu>
                <ContextMenu DataContext="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.DataContext}"
                             Tag="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.Tag}">
                    <!--DataContext is set to the DockableContentContext object (the Item in the DockTabCollection ItemsControl), Tag is to the DockableCollection-->
                    <MenuItem x:Name="AA" Command="local:CustomCommands.CloseCommand"  CommandParameter="{Binding Path=FrameworkElement}" 
                              CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=Tag}"/>
                    <MenuItem x:Name="BB" Command="local:CustomCommands.DockCommand" CommandParameter="{Binding Path=FrameworkElement}" 
                              CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=Tag}"/>
                    <MenuItem x:Name="CC" Command="local:CustomCommands.FloatCommand" CommandParameter="{Binding Path=FrameworkElement}" 
                              CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=Tag}"/>
                    <MenuItem x:Name="DD" Header="{x:Static res:Resources.TabPositionText}">
                        <ListBox ItemsSource="{Binding Source={StaticResource DockEnumeration}}" 
                                 SelectedItem="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=Tag.TabPosition}">
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Converter={StaticResource EnumerationConverter}}"/>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                    </MenuItem>
                    <MenuItem x:Name="EE" Command="local:CustomCommands.ShowCommand" CommandParameter="{Binding Path=FrameworkElement}" 
                              CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=Tag}"/>
                </ContextMenu>
            </Border.ContextMenu>
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType=local:DockingTab}, Path=DockableContentContext.FrameworkElement.(local:DockingPanel.TabText)}" Margin="3,0,0,0" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center"/>

                <StackPanel Orientation="Horizontal">
                    <CheckBox IsChecked="{Binding RelativeSource={RelativeSource AncestorType=local:DockingTab}, Path=DockableContentContext.FrameworkElement.(local:DockingPanel.IsPinned), Mode=TwoWay}" IsThreeState="False" Margin="9,1,1,1" >
                        <CheckBox.Style>
                            <Style TargetType="CheckBox">
                                <Style.Triggers>
                                    <Trigger Property="IsChecked" Value="False">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="CheckBox">
                                                    <Image Source="{StaticResource PushpinUnpinImage}"/>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger>
                                    <Trigger Property="IsChecked" Value="True">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="CheckBox">
                                                    <Image Source="{StaticResource PushpinImage}"/>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>

                    <Button Command="local:CustomCommands.CloseCommand" Margin="4,1,1,1" BorderBrush="{x:Null}" Background="{TemplateBinding Background}"
                              CommandParameter="{Binding Path=FrameworkElement}"
                              CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}}">
                        <Image Source="{StaticResource CloseImage}"/>
                    </Button>
                </StackPanel>
            </StackPanel>
        </Border>
    </ControlTemplate>

    <ContextMenu x:Key="UnPinnableDockTabInCollectionContextMenu"
                    DataContext="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.DataContext}"
                    Tag="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.Tag}">
        <!--DataContext is set to the DockableContentContext object (the Item in the DockTabCollection ItemsControl), Tag is to the DockableCollection-->
        <MenuItem x:Name="A" Command="local:CustomCommands.CloseCommand"  CommandParameter="{Binding Path=FrameworkElement}" 
                              CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=Tag}"/>
        <MenuItem x:Name="B" Command="local:CustomCommands.DockCommand" CommandParameter="{Binding Path=FrameworkElement}" 
                              CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=Tag}"/>
        <MenuItem x:Name="C" Command="local:CustomCommands.FloatCommand" CommandParameter="{Binding Path=FrameworkElement}" 
                              CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=Tag}"/>
        <MenuItem x:Name="D" Header="{x:Static res:Resources.TabPositionText}">
            <ListBox ItemsSource="{Binding Source={StaticResource DockEnumeration}}" 
                                 SelectedItem="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=Tag.TabPosition}">
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Converter={StaticResource EnumerationConverter}}"/>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
        </MenuItem>
        <MenuItem x:Name="E" Command="local:CustomCommands.ShowCommand" CommandParameter="{Binding Path=FrameworkElement}" 
                              CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=Tag}"/>
    </ContextMenu>

    <Style x:Key="UnPinnableDockTabBorderStyle" TargetType="Border">
        <!--DataContext is set to the DockableContentContext object (the Item in the DockTabCollection ItemsControl), Tag is to the DockableCollection-->
        <Setter Property="ContextMenu" Value="{StaticResource UnPinnableDockTabInCollectionContextMenu}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="0,-1,0,0"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>

    <ControlTemplate x:Key="UnPinnableDockTab">
        <!--DataContext is set to the DockableContentContext object (the Item in the DockTabCollection ItemsControl)-->
        <Border BorderBrush="{x:Null}" Background="{TemplateBinding Background}" 
                Style="{StaticResource UnPinnableDockTabBorderStyle}"
                Tag="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}}">
            <TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType=local:DockingTab}, Path=DockableContentContext.FrameworkElement.(local:DockingPanel.TabText)}" Margin="3,2,30,2" 
                       Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center"/>
        </Border>
    </ControlTemplate>

    <ContextMenu x:Key="UnPinnableDockLevelTabContextMenu" 
                    DataContext="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.DataContext}"
                    Tag="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.Tag}">
        <!--DataContext is set to the DockableContentContext object, Tag is to the Dock-->
        <MenuItem Command="local:CustomCommands.CloseCommand"  CommandParameter="{Binding Path=FrameworkElement}" 
                              CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=Tag}"/>
        <MenuItem Command="local:CustomCommands.DockCommand" CommandParameter="{Binding Path=FrameworkElement}" 
                              CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=Tag}"/>
        <MenuItem Command="local:CustomCommands.FloatCommand" CommandParameter="{Binding Path=FrameworkElement}" 
                              CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=Tag}"/>
        <MenuItem Command="local:CustomCommands.ShowCommand" CommandParameter="{Binding Path=FrameworkElement}" 
                              CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=Tag}"/>
    </ContextMenu>

    <Style x:Key="UnPinnableDockLevelTabBorderStyle" TargetType="Border">
        <!--DataContext is set to the DockableContentContext object, Tag is to the Dock-->
        <Setter Property="ContextMenu" Value="{StaticResource UnPinnableDockLevelTabContextMenu}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="0,-1,0,0"/>
    </Style>

    <ControlTemplate x:Key="UnPinnableDockLevelTab">
        <!--DataContext is set to the DockableContentContext object (the Item in the DockTabCollection ItemsControl)-->
        <Border BorderBrush="{x:Null}" Background="{TemplateBinding Background}" 
                Style="{StaticResource UnPinnableDockLevelTabBorderStyle}"
                Tag="{Binding RelativeSource={RelativeSource AncestorType=local:Dock}}">
            <TextBlock Text="{Binding Path=FrameworkElement.(local:DockingPanel.TabText)}" Margin="3,0,30,0" 
                       Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center"/>
        </Border>
    </ControlTemplate>

    <Style TargetType="local:DockingTab">
        <!--DataContext is set to the DockableContentContext object (the Item in the DockTabCollection ItemsControl)-->
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockForeground}}}"/>
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"/>
        <Style.Triggers>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockTabCollection.TabPosition}" Value="Top">
                <Setter Property="Template" Value="{StaticResource PinnableDockTab}"/>
                <Setter Property="Margin" Value="0,3,2,0"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockTabCollection.TabPosition}" Value="Top"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsTabClipped}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.TabBackground}}}"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockTabCollection.TabPosition}" Value="Top"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsTabClipped}" Value="False"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockableContentContext.IsContentVisible}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockAlternateForeground}}}"/>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.TabVisibleBackground}}}"/>
            </MultiDataTrigger>
            
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockTabCollection.TabPosition}" Value="Top"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsTabClipped}" Value="False"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockableContentContext.IsContentVisible}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.TabHoverBackground}}}"/>
            </MultiDataTrigger>


            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockTabCollection.TabPosition}" Value="Bottom"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockTabCollection.IsDockLevelTabCollection}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource UnPinnableDockTab}"/>
                <Setter Property="Margin" Value="0,0,2,0"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockTabCollection.TabPosition}" Value="Bottom"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockTabCollection.IsDockLevelTabCollection}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource UnPinnableDockLevelTab}"/>
                <Setter Property="Margin" Value="0,0,2,0"/>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockForeground}}}"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockTabCollection.TabPosition}" Value="Bottom"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockableContentContext.IsContentVisible}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{Binding Path=FrameworkElement.Background}"/>
                <Setter Property="Foreground" >
                    <Setter.Value>
                        <PriorityBinding>
                            <Binding Path="FrameworkElement.Foreground"/>
                        </PriorityBinding>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
            
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockTabCollection.TabPosition}" Value="Bottom"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockableContentContext.IsContentVisible}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.TabBackground}}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.TabForeground}}}"/>
            </MultiDataTrigger>
            
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockTabCollection.TabPosition}" Value="Bottom"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockableContentContext.IsContentVisible}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.TabHoverBackground}}}"/>
            </MultiDataTrigger>

            
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockTabCollection.TabPosition}" Value="Left">
                <Setter Property="Template" Value="{StaticResource UnPinnableDockLevelTab}"/>
                <Setter Property="Margin" Value="3,0,2,2"/>
                <Setter Property="LayoutTransform">
                    <Setter.Value>
                        <RotateTransform Angle="-90"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockTabCollection.TabPosition}" Value="Left"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockableContentContext.IsContentVisible}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.TabHoverBackground}}}"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockTabCollection.TabPosition}" Value="Right">
                <Setter Property="Template" Value="{StaticResource UnPinnableDockLevelTab}"/>
                <Setter Property="Margin" Value="0,0,2,2"/>
                <Setter Property="LayoutTransform">
                    <Setter.Value>
                        <RotateTransform Angle="90"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockTabCollection.TabPosition}" Value="Right"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockableContentContext.IsContentVisible}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.TabHoverBackground}}}"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=DockTabCollection.IsDockLevelTabCollection}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.TabBackground}}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.TabForeground}}}"/>
            </DataTrigger>
            
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsTabClipped}" Value="True" >
                <Setter Property="Visibility" Value="Hidden"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="local:DockTabCollection">
        <Setter Property="Background"  Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DockTabCollection">
                    <Grid ShowGridLines="False">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ItemsPresenter Grid.Column="0" Grid.Row="0"/>
                        <Menu x:Name="ItemMenu" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}">
                            <Menu.Style>
                                <Style TargetType="Menu">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:DockTabCollection}, Path=TabPosition}" Value="Top">
                                            <Setter Property="Grid.Column" Value="1"/>
                                            <Setter Property="Grid.Row" Value="0"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:DockTabCollection}, Path=TabPosition}" Value="Bottom">
                                            <Setter Property="Grid.Column" Value="1"/>
                                            <Setter Property="Grid.Row" Value="0"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:DockTabCollection}, Path=TabPosition}" Value="Left">
                                            <Setter Property="Grid.Column" Value="0"/>
                                            <Setter Property="Grid.Row" Value="1"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:DockTabCollection}, Path=TabPosition}" Value="Right">
                                            <Setter Property="Grid.Column" Value="0"/>
                                            <Setter Property="Grid.Row" Value="1"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Dock}, Path=FloatChoice}" Value="Floating">
                                            <Setter Property="Grid.Column" Value="1"/>
                                            <Setter Property="Grid.Row" Value="0"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Menu.Style>
                            <MenuItem ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=local:DockTabCollection}, Path=HiddenTabsView}"
                                Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}">
                                <MenuItem.Style>
                                    <Style TargetType="MenuItem">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:DockTabCollection}, Path=IsAnyTabClipped}" Value="False">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </MenuItem.Style>
                                <MenuItem.Header>
                                    <Image Source="{StaticResource OverflowDropdownImage}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                </MenuItem.Header>
                                <MenuItem.ItemTemplate>
                                    <DataTemplate>
                                        <MenuItem Header="{Binding Path=FrameworkElement.(local:DockingPanel.TabText)}" Command="local:CustomCommands.SelectCommand" CommandParameter="{Binding}" 
                                             CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=local:DockTabCollection}}"/>
                                    </DataTemplate>
                                </MenuItem.ItemTemplate>
                            </MenuItem>
                        </Menu>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel x:Name="ItemStackPanel"  Orientation="{Binding RelativeSource={RelativeSource AncestorType=local:DockTabCollection}, Path=Orientation}"
                            VirtualizingPanel.IsContainerVirtualizable="False"
                            Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="local:DockingTab" BasedOn="{StaticResource {x:Type local:DockingTab}}">
                    <Setter Property="DockTabCollection" Value="{Binding RelativeSource={RelativeSource AncestorType=local:DockTabCollection}}"/>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:Dock">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:Dock">
                    <Grid Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>                           <!--DockTabCollection-->
                            <ColumnDefinition Width="Auto"/>                           <!--DockableCollection + Drop rectangle-->
                            <ColumnDefinition/>                                        <!--DockableCollection-->
                            <ColumnDefinition Width="Auto"/>                           <!--DockableCollection + Drop rectangle-->
                            <ColumnDefinition Width="Auto"/>                           <!--DockTabCollection-->
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>                             <!--DockableCollection + Drop rectangle-->
                            <RowDefinition/>                                           <!--DockableCollection-->
                            <RowDefinition Height="Auto"/>                             <!--DockableCollection + Drop rectangle-->
                            <RowDefinition Height="Auto"/>                             <!--DockTabCollection-->
                        </Grid.RowDefinitions>

                        <local:DockTabCollection x:Name="LeftDockTabs" Grid.Column="0" Grid.Row="0" Grid.RowSpan="3" Orientation="Vertical" TabPosition="Left"
                                 DataContext="{Binding RelativeSource={RelativeSource AncestorType=local:Dock}}"
                                 ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=local:Dock}, Path=LeftTabs}">
                            <local:DockTabCollection.Style>
                                <Style TargetType="{x:Type local:DockTabCollection}" BasedOn="{StaticResource {x:Type local:DockTabCollection}}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEmpty}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </local:DockTabCollection.Style>
                        </local:DockTabCollection>
                        
                        <ItemsPresenter Grid.Column="1" Grid.ColumnSpan="3" Grid.Row="0" Grid.RowSpan="3"/>

                        <local:DockTabCollection x:Name="RightDockTabs" Grid.Column="4" Grid.Row="0" Grid.RowSpan="3" Orientation="Vertical" TabPosition="Right"
                                 DataContext="{Binding RelativeSource={RelativeSource AncestorType=local:Dock}}"
                                 ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=local:Dock}, Path=RightTabs}">
                            <local:DockTabCollection.Style>
                                <Style TargetType="{x:Type local:DockTabCollection}" BasedOn="{StaticResource {x:Type local:DockTabCollection}}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEmpty}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </local:DockTabCollection.Style>
                        </local:DockTabCollection>

                        <local:DockTabCollection x:Name="BottomDockTabs" Grid.Column="1" Grid.ColumnSpan="3" Grid.Row="3" Orientation="Horizontal" TabPosition="Bottom" Margin="0,2,0,0"
                                 DataContext="{Binding RelativeSource={RelativeSource AncestorType=local:Dock}}"
                                 ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=local:Dock}, Path=BottomTabs}">
                            <local:DockTabCollection.Style>
                                <Style TargetType="{x:Type local:DockTabCollection}" BasedOn="{StaticResource {x:Type local:DockTabCollection}}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEmpty}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </local:DockTabCollection.Style>
                        </local:DockTabCollection>

                        <Rectangle Grid.Column="1" Grid.ColumnSpan="3" Grid.Row="0" Panel.ZIndex="1" Height="100" Fill="Gray" Opacity="0.3">
                            <Rectangle.Style>
                                <Style TargetType="Rectangle">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Dock}, Path=DragTargetStyle}" Value="TopMost"/>
                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Dock}, Path=DockingChoiceVisibility}" Value="Visible"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Rectangle.Style>
                        </Rectangle>
                        <Rectangle Grid.Column="1" Grid.ColumnSpan="3" Grid.Row="2" Panel.ZIndex="1" Height="100" Fill="Gray" Opacity="0.3">
                            <Rectangle.Style>
                                <Style TargetType="Rectangle">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Dock}, Path=DragTargetStyle}" Value="BottomMost"/>
                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Dock}, Path=DockingChoiceVisibility}" Value="Visible"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Rectangle.Style>
                        </Rectangle>
                        <Rectangle  Grid.Column="1" Grid.Row="0" Grid.RowSpan="3" Panel.ZIndex="1" Width="100" Fill="Gray" Opacity="0.3">
                            <Rectangle.Style>
                                <Style TargetType="Rectangle">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Dock}, Path=DragTargetStyle}" Value="LeftMost"/>
                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Dock}, Path=DockingChoiceVisibility}" Value="Visible"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Rectangle.Style>
                        </Rectangle>
                        <Rectangle  Grid.Column="3" Grid.Row="0" Grid.RowSpan="3" Panel.ZIndex="1" Width="100" Fill="Gray" Opacity="0.3">
                            <Rectangle.Style>
                                <Style TargetType="Rectangle">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Dock}, Path=DragTargetStyle}" Value="RightMost"/>
                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Dock}, Path=DockingChoiceVisibility}" Value="Visible"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Rectangle.Style>
                        </Rectangle>

                        <local:DockingChoice x:Name="DockingChoice" Grid.Column="0" Grid.ColumnSpan="5" Grid.Row="0" Grid.RowSpan="4" Panel.ZIndex="4" HorizontalAlignment="Left" VerticalAlignment="Top"
                                    Opacity="0.7" DataContext="{Binding RelativeSource={RelativeSource AncestorType=local:Dock}, Path=DragTarget, Mode=OneWay}"
                                    Margin="{Binding RelativeSource={RelativeSource AncestorType=local:Dock}, Path=DockingChoicePosition, Mode=OneWay}"
                                    Visibility="{Binding RelativeSource={RelativeSource AncestorType=local:Dock}, Path=DockingChoiceVisibility, Mode=OneWay}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <local:DockingPanel Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:DockingChoice">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition />
                            <RowDefinition />
                            <RowDefinition />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DockingChoice">
                    <local:DockingChoiceBorder
                        BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBorderBrush}}}"
                        BorderBrushThickness="1"
                        Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBackground}}}">
                        <ItemsPresenter Margin="3"/>
                    </local:DockingChoiceBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DockingChoicePanelRectangleStyle" TargetType="Rectangle">
        <Setter Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceForeground}}}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:DockingChoicePanel}, Path=IsDragTarget}" Value="True">
                <Setter Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceForegroundHover}}}"/>
            </DataTrigger>
        </Style.Triggers>    
    </Style>
    
    <Style TargetType="local:DockingChoicePanel">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Orientation}" Value="Left">
                <Setter Property="Grid.Column" Value="1"/>
                <Setter Property="Grid.Row" Value="2"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="local:DockingChoicePanel">
                            <Button Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBackground}}}" BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBorderBrush}}}" BorderThickness="1">
                                <Button.Resources>
                                    <Style TargetType="Border">
                                        <Setter Property="CornerRadius" Value="3"/>
                                    </Style>
                                </Button.Resources>
                                <StackPanel Orientation="Horizontal" Margin="3" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Border BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBorderBrush}}}" BorderThickness="1" CornerRadius="0">
                                        <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Rectangle Height="4" Width="15" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"/>
                                            <Rectangle Height="26" Width="15" Style="{StaticResource DockingChoicePanelRectangleStyle}">
                                            </Rectangle>
                                        </StackPanel>
                                    </Border>
                                    <Image Source="{StaticResource GlyphLeftImage}" Height="16" Width="15"/>
                                </StackPanel>
                            </Button>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Orientation}" Value="LeftMost">
                <Setter Property="Grid.Column" Value="0"/>
                <Setter Property="Grid.Row" Value="2"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="local:DockingChoicePanel">
                            <Button Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBackground}}}" BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBorderBrush}}}" BorderThickness="1">
                                <Button.Resources>
                                    <Style TargetType="Border">
                                        <Setter Property="CornerRadius" Value="3"/>
                                    </Style>
                                </Button.Resources>
                                <StackPanel Orientation="Horizontal" Margin="3" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Border BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBorderBrush}}}" BorderThickness="1" CornerRadius="0">
                                        <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Rectangle Height="4" Width="15" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"/>
                                            <Rectangle Height="26" Width="15"  Style="{StaticResource DockingChoicePanelRectangleStyle}">
                                            </Rectangle>
                                        </StackPanel>
                                    </Border>
                                    <Image Source="{StaticResource GlyphLeftImage}" Height="16" Width="15"/>
                                </StackPanel>
                            </Button>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Orientation}" Value="Right">
                <Setter Property="Grid.Column" Value="3"/>
                <Setter Property="Grid.Row" Value="2"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="local:DockingChoicePanel">
                            <Button Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBackground}}}" BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBorderBrush}}}" BorderThickness="1">
                                <Button.Resources>
                                    <Style TargetType="Border">
                                        <Setter Property="CornerRadius" Value="3"/>
                                    </Style>
                                </Button.Resources>
                                <StackPanel Orientation="Horizontal" Margin="3" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Image Source="{StaticResource GlyphLeftImage}" Height="16" Width="15">
                                        <Image.LayoutTransform>
                                            <RotateTransform Angle="180"/>
                                        </Image.LayoutTransform>
                                    </Image>
                                    <Border BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBorderBrush}}}" BorderThickness="1" CornerRadius="0">
                                        <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Rectangle Height="4" Width="15" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"/>
                                            <Rectangle Height="26" Width="15"  Style="{StaticResource DockingChoicePanelRectangleStyle}">
                                            </Rectangle>
                                        </StackPanel>
                                    </Border>
                                </StackPanel>
                            </Button>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Orientation}" Value="RightMost">
                <Setter Property="Grid.Column" Value="4"/>
                <Setter Property="Grid.Row" Value="2"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="local:DockingChoicePanel">
                            <Button Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBackground}}}" BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBorderBrush}}}" BorderThickness="1">
                                <Button.Resources>
                                    <Style TargetType="Border">
                                        <Setter Property="CornerRadius" Value="3"/>
                                    </Style>
                                </Button.Resources>
                                <StackPanel Orientation="Horizontal" Margin="3" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Image Source="{StaticResource GlyphLeftImage}" Height="16" Width="15">
                                        <Image.LayoutTransform>
                                            <RotateTransform Angle="180"/>
                                        </Image.LayoutTransform>
                                    </Image>
                                    <Border BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBorderBrush}}}" BorderThickness="1" CornerRadius="0">
                                        <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Rectangle Height="4" Width="15" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"/>
                                            <Rectangle Height="26" Width="15" Style="{StaticResource DockingChoicePanelRectangleStyle}">
                                            </Rectangle>
                                        </StackPanel>
                                    </Border>
                                </StackPanel>
                            </Button>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Orientation}" Value="Top">
                <Setter Property="Grid.Column" Value="2"/>
                <Setter Property="Grid.Row" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="local:DockingChoicePanel">
                            <Button Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBackground}}}" BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBorderBrush}}}" BorderThickness="1">
                                <Button.Resources>
                                    <Style TargetType="Border">
                                        <Setter Property="CornerRadius" Value="3"/>
                                    </Style>
                                </Button.Resources>
                                <StackPanel Orientation="Vertical" Margin="3" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Border BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBorderBrush}}}" BorderThickness="1" CornerRadius="0">
                                        <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Rectangle Height="4" Width="30" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"/>
                                            <Rectangle Height="14" Width="30"  Style="{StaticResource DockingChoicePanelRectangleStyle}">
                                            </Rectangle>
                                        </StackPanel>
                                    </Border>
                                    <Image Source="{StaticResource GlyphLeftImage}" Height="16" Width="12">
                                        <Image.LayoutTransform>
                                            <RotateTransform Angle="90"/>
                                        </Image.LayoutTransform>
                                    </Image>
                                </StackPanel>
                            </Button>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Orientation}" Value="TopMost">
                <Setter Property="Grid.Column" Value="2"/>
                <Setter Property="Grid.Row" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="local:DockingChoicePanel">
                            <Button Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBackground}}}" BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBorderBrush}}}" BorderThickness="1">
                                <Button.Resources>
                                    <Style TargetType="Border">
                                        <Setter Property="CornerRadius" Value="3"/>
                                    </Style>
                                </Button.Resources>
                                <StackPanel Orientation="Vertical" Margin="3" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Border BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBorderBrush}}}" BorderThickness="1" CornerRadius="0">
                                        <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Rectangle Height="4" Width="30" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"/>
                                            <Rectangle Height="14" Width="30"  Style="{StaticResource DockingChoicePanelRectangleStyle}">
                                            </Rectangle>
                                        </StackPanel>
                                    </Border>
                                    <Image Source="{StaticResource GlyphLeftImage}" Height="16" Width="12">
                                        <Image.LayoutTransform>
                                            <RotateTransform Angle="90"/>
                                        </Image.LayoutTransform>
                                    </Image>
                                </StackPanel>
                            </Button>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Orientation}" Value="Bottom">
                <Setter Property="Grid.Column" Value="2"/>
                <Setter Property="Grid.Row" Value="3"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="local:DockingChoicePanel">
                            <Button Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBackground}}}" BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBorderBrush}}}" BorderThickness="1">
                                <Button.Resources>
                                    <Style TargetType="Border">
                                        <Setter Property="CornerRadius" Value="3"/>
                                    </Style>
                                </Button.Resources>
                                <StackPanel Orientation="Vertical" Margin="3" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Image Source="{StaticResource GlyphLeftImage}" Height="16" Width="12">
                                        <Image.LayoutTransform>
                                            <RotateTransform Angle="-90"/>
                                        </Image.LayoutTransform>
                                    </Image>
                                    <Border BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBorderBrush}}}" BorderThickness="1" CornerRadius="0">
                                        <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Rectangle Height="4" Width="30" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"/>
                                            <Rectangle Height="14" Width="30" Style="{StaticResource DockingChoicePanelRectangleStyle}">
                                            </Rectangle>
                                        </StackPanel>
                                    </Border>
                                </StackPanel>
                            </Button>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Orientation}" Value="BottomMost">
                <Setter Property="Grid.Column" Value="2"/>
                <Setter Property="Grid.Row" Value="4"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="local:DockingChoicePanel">
                            <Button Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBackground}}}" BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBorderBrush}}}" BorderThickness="1">
                                <Button.Resources>
                                    <Style TargetType="Border">
                                        <Setter Property="CornerRadius" Value="3"/>
                                    </Style>
                                </Button.Resources>
                                <StackPanel Orientation="Vertical" Margin="3" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Image Source="{StaticResource GlyphLeftImage}" Height="16" Width="12">
                                        <Image.LayoutTransform>
                                            <RotateTransform Angle="-90"/>
                                        </Image.LayoutTransform>
                                    </Image>
                                    <Border BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBorderBrush}}}" BorderThickness="1" CornerRadius="0">
                                        <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Rectangle Height="4" Width="30" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"/>
                                            <Rectangle Height="14" Width="30" Style="{StaticResource DockingChoicePanelRectangleStyle}">
                                            </Rectangle>
                                        </StackPanel>
                                    </Border>
                                </StackPanel>
                            </Button>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Orientation}" Value="Center">
                <Setter Property="Grid.Column" Value="2"/>
                <Setter Property="Grid.Row" Value="2"/>
                <Setter Property="Margin" Value="3"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="local:DockingChoicePanel">
                            <Button Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBackground}}}" BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBorderBrush}}}" BorderThickness="1">
                                <Button.Resources>
                                    <Style TargetType="Border">
                                        <Setter Property="CornerRadius" Value="3"/>
                                    </Style>
                                </Button.Resources>
                                <StackPanel Orientation="Vertical" Margin="3" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Border BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockingChoiceBorderBrush}}}" BorderThickness="1" CornerRadius="0">
                                        <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Rectangle Height="4" Width="30" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"/>
                                            <Rectangle Height="26" Width="30" Style="{StaticResource DockingChoicePanelRectangleStyle}">
                                            </Rectangle>
                                        </StackPanel>
                                    </Border>
                                </StackPanel>
                            </Button>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="local:DockSplitter">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DockSplitter">
                    <Grid >
                        <Grid.Style>
                            <Style TargetType="Grid">
                                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"/>
                                <Style.Triggers>
                                    <!--<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:DockSplitter}, Path=Mode}" Value="Invalid">
                                        <Setter Property="Background" Value="Red"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:DockSplitter}, Path=Mode}" Value="NotBetweenDockableCollections">
                                        <Setter Property="Background" Value="Green"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:DockSplitter}, Path=Mode}" Value="BetweenDockableCollections">
                                        <Setter Property="Background" Value="Yellow"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:DockSplitter}, Path=Mode}" Value="OnWindowEdge">
                                        <Setter Property="Background" Value="Brown"/>
                                    </DataTrigger>-->
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Mode}" Value="NotBetweenDockableCollections">
                <Setter Property="IsEnabled" Value="False"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="local:DockableContentHeader">
        <!--DataContext is the content Item from DockableCollection, Tag is the DockableCollection-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DockableContentHeader">
                    <Grid  VerticalAlignment="Top" HorizontalAlignment="Stretch" Margin="0,4,0,0"  
                          Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.TabBackground}}}"
                          Tag="{Binding RelativeSource={RelativeSource AncestorType=local:DockableContentHeader}, Path=Tag}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ContextMenu>
                            <ContextMenu 
                                    DataContext="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.DataContext}"
                                    Tag="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.Tag}">
                                <!--DataContext is the Item from DockableCollection, Tag is the DockableCollection-->
                                <MenuItem Command="local:CustomCommands.CloseCommand"  CommandParameter="{Binding}" 
                                          CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=Tag}"/>
                                <MenuItem Command="local:CustomCommands.DockCommand" CommandParameter="{Binding}"  
                                          CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=Tag}"/>
                                <MenuItem Command="local:CustomCommands.FloatCommand" CommandParameter="{Binding}" 
                                          CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=Tag}"/>
                                <MenuItem Header="{x:Static res:Resources.TabPositionText}">
                                    <ListBox ItemsSource="{Binding Source={StaticResource DockEnumeration}}" 
                                             SelectedItem="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=Tag.TabPosition}">
                                        <ListBox.ItemTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Converter={StaticResource EnumerationConverter}}"/>
                                            </DataTemplate>
                                        </ListBox.ItemTemplate>
                                    </ListBox>
                                </MenuItem>
                            </ContextMenu>
                        </Grid.ContextMenu>

                        <TextBlock Text="{Binding Path=(local:DockingPanel.TabText)}" 
                             Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockForeground}}}" 
                             Grid.Column="0" Grid.Row="0" VerticalAlignment="Center" Margin="4,0,0,4"/>

                        <Menu Grid.Column="1" Grid.Row="0" 
                              Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.TabBackground}}}" 
                              Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.TabText}}}">
                            <MenuItem>
                                <MenuItem.Header>
                                    <Image Source="{StaticResource GlyphDownImage}" Height="16" Width="16" Margin="0,0,0,4"/>
                                </MenuItem.Header>
                                <MenuItem Command="local:CustomCommands.CloseCommand"  CommandParameter="{Binding}"  CommandTarget="{Binding}"/>
                                <MenuItem Command="local:CustomCommands.DockCommand" CommandParameter="{Binding}"  
                                          CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}}"/>
                                <MenuItem Command="local:CustomCommands.FloatCommand" CommandParameter="{Binding}"  
                                          CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}}"/>
                                <MenuItem Header="{x:Static res:Resources.TabPositionText}">
                                    <ListBox ItemsSource="{Binding Source={StaticResource DockEnumeration}}" 
                                             SelectedItem="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}, Path=TabPosition}">
                                        <ListBox.ItemTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Converter={StaticResource EnumerationConverter}}"/>
                                            </DataTemplate>
                                        </ListBox.ItemTemplate>
                                    </ListBox>
                                </MenuItem>
                            </MenuItem>
                        </Menu>
                        
                        <CheckBox IsChecked="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}, Path=State, Mode=TwoWay, Converter={StaticResource CollectionStatusToBoolConverter}}" 
                                  IsThreeState="False" Focusable="False"
                                  Grid.Column="2" Grid.Row="0" Margin="9,1,1,1" 
                                  Height="16" Width="16">
                            <CheckBox.Style>
                                <Style TargetType="CheckBox">
                                    <Style.Triggers>
                                        <Trigger Property="IsChecked" Value="False">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="CheckBox">
                                                        <Image Source="{StaticResource PushpinUnpinImage}"/>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Trigger>
                                        <Trigger Property="IsChecked" Value="True">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="CheckBox">
                                                        <Image Source="{StaticResource PushpinImage}"/>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </CheckBox.Style>
                        </CheckBox>

                        <Button Command="local:CustomCommands.CloseCommand" Grid.Column="3" Grid.Row="0" Margin="4,1,1,1" Focusable="False"  Height="16" Width="16"
                                    BorderBrush="{x:Null}" 
                                    CommandParameter="{Binding}"
                                    CommandTarget="{Binding Path=Tag}"
                                    Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.TabBackground}}}">
                            <Image Source="{StaticResource SimpleCloseImage}"/>
                        </Button>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:DockableCollectionItem">
        <Setter Property="DockableCollection" Value="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}}"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <local:DockableContentHeader Grid.Column="0" Grid.Row="0" DataContext="{Binding}" Tag="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}}">
                            <local:DockableContentHeader.Style>
                                <Style TargetType="local:DockableContentHeader" BasedOn="{StaticResource {x:Type local:DockableContentHeader}}">
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Dock}, Path=FloatChoice}" Value="Root"/>
                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}, Path=TabPosition}" Value="Top"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </local:DockableContentHeader.Style>
                        </local:DockableContentHeader>
                        <Grid Grid.Column="0" Grid.Row="1">
                            <ContentPresenter Content="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollectionItem}, Path=Content}"/>
                        </Grid>
                    </Grid>
                </DataTemplate>

            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContentVisible}" Value="False">
                <Setter Property="Visibility" Value="Hidden"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style TargetType="local:DockableCollection">
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DockableCollection">
                    <Grid x:Name="LayoutGrid" ShowGridLines="False">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="3"/>
                            <!--DockSplitter-->
                            <ColumnDefinition/>
                            <!--DockableContent + Drop rectangle-->
                            <ColumnDefinition/>
                            <!--DockableContent + Drop rectangle-->
                            <ColumnDefinition/>
                            <!--DockableContent + Drop rectangle-->
                            <ColumnDefinition Width="3"/>
                            <!--DockSplitter-->
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="3"/>
                            <!--DockSplitter-->
                            <RowDefinition Height="Auto"/>
                            <!--DockTabCollection-->
                            <RowDefinition/>
                            <!--DockableContent + Drop rectangle-->
                            <RowDefinition/>
                            <!--DockableContent + Drop rectangle-->
                            <RowDefinition/>
                            <!--DockableContent + Drop rectangle-->
                            <RowDefinition Height="Auto"/>
                            <!--DockTabCollection-->
                            <RowDefinition Height="3"/>
                            <!--DockSplitter-->
                        </Grid.RowDefinitions>

                        <local:DockSplitter Grid.Column="0" Grid.ColumnSpan="5" Grid.Row="0" Orientation="Horizontal" DockPosition="Top" Cursor="SizeNS"
                                            Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"
                                            DockableCollection="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}}" />
                        <local:DockSplitter Grid.Column="0" Grid.ColumnSpan="5" Grid.Row="6" Orientation="Horizontal" DockPosition="Bottom" Cursor="SizeNS"
                                            Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"
                                            DockableCollection="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}}" />
                        <local:DockSplitter Grid.Column="0" Grid.Row="0" Grid.RowSpan="7" Orientation="Vertical" DockPosition="Left"  Cursor="SizeWE"
                                            Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"
                                            DockableCollection="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}}" />
                        <local:DockSplitter Grid.Column="4" Grid.Row="0" Grid.RowSpan="7" Orientation="Vertical" DockPosition="Right"  Cursor="SizeWE"
                                            Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"
                                            DockableCollection="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}}" />

                        <local:DockTabCollection x:Name="DockTabs" 
                                DataContext="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}}"
                                DockableCollection="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}}"
                                ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}, Path=DockableContentContexts}">
                            <local:DockTabCollection.Style>
                                <Style TargetType="{x:Type local:DockTabCollection}" BasedOn="{StaticResource {x:Type local:DockTabCollection}}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=TabPosition}" Value="Top">
                                            <Setter Property="Grid.Column" Value="1"/>
                                            <Setter Property="Grid.ColumnSpan" Value="3"/>
                                            <Setter Property="Grid.Row" Value="1"/>
                                            <Setter Property="Orientation" Value="Horizontal"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=TabPosition}" Value="Bottom">
                                            <Setter Property="Grid.Column" Value="1"/>
                                            <Setter Property="Grid.ColumnSpan" Value="3"/>
                                            <Setter Property="Grid.Row" Value="5"/>
                                            <Setter Property="Orientation" Value="Horizontal"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=Dock.FloatChoice}" Value="Floating">
                                            <Setter Property="Grid.Column" Value="1"/>
                                            <Setter Property="Grid.ColumnSpan" Value="3"/>
                                            <Setter Property="Grid.Row" Value="5"/>
                                            <Setter Property="Orientation" Value="Horizontal"/>
                                        </DataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=TabPosition}" Value="Bottom"/>
                                                <Condition Binding="{Binding Path=ContentCount}" Value="1" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </local:DockTabCollection.Style>
                        </local:DockTabCollection>

                        <Grid x:Name="ContentGrid" Grid.Column="1" Grid.ColumnSpan="3" Grid.Row="2" Grid.RowSpan="3" ShowGridLines="False">

                            <!--<Border Grid.Column="1" Grid.Row="2" Panel.ZIndex="4" HorizontalAlignment="Left" VerticalAlignment="Bottom" BorderThickness="1" BorderBrush="Black" Background="LightGray">
                                    <Border.Style>
                                        <Style TargetType="Border">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}, Path=HoverState}" Value="MouseHovering">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Border.Style>
                                    <TextBlock Grid.Column="1" Grid.Row="1" HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="8">
                                        <TextBlock.Inlines>
                                            <Run Text="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}, Path=LayoutContext.Left, Mode=OneWay}"/>
                                            <Run Text=","/>
                                            <Run Text="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}, Path=LayoutContext.Top, Mode=OneWay}"/>
                                            <Run Text=","/>
                                            <Run Text="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}, Path=LayoutContext.Right, Mode=OneWay}"/>
                                            <Run Text=","/>
                                            <Run Text="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}, Path=LayoutContext.Bottom, Mode=OneWay}"/>
                                        </TextBlock.Inlines>
                                    </TextBlock>
                                </Border>-->

                            <ItemsPresenter/>
                        </Grid>

                        <Rectangle  Grid.Column="1" Grid.ColumnSpan="3" Grid.Row="2" Grid.RowSpan="3" Panel.ZIndex="2" Fill="Gray" Opacity="0.3">
                            <Rectangle.Style>
                                <Style TargetType="Rectangle">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}, Path=DragTargetStyle}" Value="Center">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Rectangle.Style>
                        </Rectangle>

                        <Rectangle  Grid.Column="1" Grid.ColumnSpan="3" Grid.Row="4" Panel.ZIndex="2" Fill="Gray" Opacity="0.3">
                            <Rectangle.Style>
                                <Style TargetType="Rectangle">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}, Path=DragTargetStyle}" Value="Bottom">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Rectangle.Style>
                        </Rectangle>

                        <Rectangle  Grid.Column="1" Grid.Row="2" Grid.RowSpan="3" Panel.ZIndex="2" Fill="Gray" Opacity="0.3">
                            <Rectangle.Style>
                                <Style TargetType="Rectangle">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}, Path=DragTargetStyle}" Value="Left">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Rectangle.Style>
                        </Rectangle>

                        <Rectangle  Grid.Column="3" Grid.Row="2" Grid.RowSpan="3" Panel.ZIndex="2" Fill="Gray" Opacity="0.3">
                            <Rectangle.Style>
                                <Style TargetType="Rectangle">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}, Path=DragTargetStyle}" Value="Right">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Rectangle.Style>
                        </Rectangle>

                        <Rectangle  Grid.Column="1" Grid.ColumnSpan="3" Grid.Row="2" Panel.ZIndex="2" Fill="Gray" Opacity="0.3">
                            <Rectangle.Style>
                                <Style TargetType="Rectangle">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:DockableCollection}, Path=DragTargetStyle}" Value="Top">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Rectangle.Style>
                        </Rectangle>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <Grid/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsCollapsed}" Value="True">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="local:DockWindow">
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DockWindow">
                    <Grid x:Name="ContentGrid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="3"/>
                            <ColumnDefinition Width="12"/>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="12"/>
                            <ColumnDefinition Width="3"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="3"/>
                            <RowDefinition Height="12"/>
                            <RowDefinition/>
                            <RowDefinition Height="12"/>
                            <RowDefinition Height="3"/>
                        </Grid.RowDefinitions>

                        <Grid Grid.Column="1" Grid.ColumnSpan="3" Grid.Row="1" Grid.RowSpan="3">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>

                            <Grid Grid.Column="0" Grid.Row="0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                
                                <StackPanel Grid.Column="0" Grid.Row="0" Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Right">
                                    <Button Command="local:CustomCommands.MinimizeCommand" Height="16" Width="16" BorderThickness="0" Margin="0,1,5,1" ToolTip="Minimize"
                                         Background="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=Background}">
                                        <Image Source="{StaticResource MinimizeImage}"/>
                                    </Button>
                                    <Button Height="16" Width="16" BorderThickness="0" Margin="0,1,5,1" Background="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=Background}">
                                        <Button.Style>
                                            <Style TargetType="Button">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=WindowState}" Value="Normal">
                                                        <Setter Property="Command" Value="local:CustomCommands.MaximizeCommand"/>
                                                        <Setter Property="ToolTip" Value="Maximize"/>
                                                        <Setter Property="Content">
                                                            <Setter.Value>
                                                                <Image Source="{StaticResource MaximizeImage}"/>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=WindowState}" Value="Maximized">
                                                        <Setter Property="Command" Value="local:CustomCommands.RestoreCommand"/>
                                                        <Setter Property="ToolTip" Value="Restore"/>
                                                        <Setter Property="Content">
                                                            <Setter.Value>
                                                                <Image Source="{StaticResource RestoreImage}"/>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Button.Style>
                                    </Button>
                                    <Button Command="local:CustomCommands.CloseCommand" Height="16" Width="16" BorderThickness="0" Margin="0,1,4,1" ToolTip="Close"
                                         Background="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=Background}">
                                        <Image Source="{StaticResource CloseImage}"/>
                                    </Button>
                                </StackPanel>
                            </Grid>

                            <local:Dock  Grid.Column="0" Grid.Row="1">
                            </local:Dock>
                        </Grid>

                        <local:DockSplitter Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0" Panel.ZIndex="2" Orientation="NW" DockPosition="Top"  Cursor="SizeNWSE"
                                            Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"
                                            DockWindow="{Binding RelativeSource={RelativeSource AncestorType=local:DockWindow}}" />
                        <local:DockSplitter Grid.Column="2" Grid.Row="0" Panel.ZIndex="2" Orientation="Horizontal" DockPosition="Top"   Cursor="SizeNS"
                                            Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"
                                            DockWindow="{Binding RelativeSource={RelativeSource AncestorType=local:DockWindow}}" />
                        <local:DockSplitter Grid.Column="3" Grid.ColumnSpan="2" Grid.Row="0" Panel.ZIndex="2" Orientation="NE" DockPosition="Top"   Cursor="SizeNESW"
                                            Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"
                                            DockWindow="{Binding RelativeSource={RelativeSource AncestorType=local:DockWindow}}" />

                        <local:DockSplitter Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="4" Panel.ZIndex="2" Orientation="SW" DockPosition="Bottom"  Cursor="SizeNESW"
                                            Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"
                                            DockWindow="{Binding RelativeSource={RelativeSource AncestorType=local:DockWindow}}" />
                        <local:DockSplitter Grid.Column="2" Grid.Row="4" Panel.ZIndex="2" Orientation="Horizontal" DockPosition="Bottom"  Cursor="SizeNS"
                                            Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"
                                            DockWindow="{Binding RelativeSource={RelativeSource AncestorType=local:DockWindow}}" />
                        <local:DockSplitter Grid.Column="3" Grid.ColumnSpan="2" Grid.Row="4" Panel.ZIndex="2" Orientation="SE" DockPosition="Bottom"    Cursor="SizeNWSE"
                                            Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"
                                            DockWindow="{Binding RelativeSource={RelativeSource AncestorType=local:DockWindow}}" />

                        <local:DockSplitter Grid.Column="0" Grid.Row="0" Grid.RowSpan="2" Panel.ZIndex="2" Orientation="NW" DockPosition="Left"    Cursor="SizeNWSE"
                                            Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"
                                            DockWindow="{Binding RelativeSource={RelativeSource AncestorType=local:DockWindow}}" />
                        <local:DockSplitter Grid.Column="0" Grid.Row="2" Panel.ZIndex="2" Orientation="Vertical" DockPosition="Left"  Cursor="SizeWE"
                                            Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"
                                            DockWindow="{Binding RelativeSource={RelativeSource AncestorType=local:DockWindow}}" />
                        <local:DockSplitter Grid.Column="0" Grid.Row="3" Grid.RowSpan="2" Panel.ZIndex="2" Orientation="SW" DockPosition="Left"   Cursor="SizeNESW"
                                            Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"
                                            DockWindow="{Binding RelativeSource={RelativeSource AncestorType=local:DockWindow}}" />

                        <local:DockSplitter Grid.Column="4" Grid.Row="0" Grid.RowSpan="2" Panel.ZIndex="2" Orientation="NE" DockPosition="Right"   Cursor="SizeNESW"
                                            Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"
                                            DockWindow="{Binding RelativeSource={RelativeSource AncestorType=local:DockWindow}}" />
                        <local:DockSplitter Grid.Column="4" Grid.Row="2" Panel.ZIndex="2" Orientation="Vertical" DockPosition="Right"  Cursor="SizeWE"
                                            Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"
                                            DockWindow="{Binding RelativeSource={RelativeSource AncestorType=local:DockWindow}}" />
                        <local:DockSplitter Grid.Column="4" Grid.Row="3" Grid.RowSpan="2" Panel.ZIndex="2" Orientation="SE" DockPosition="Right"    Cursor="SizeNWSE"
                                            Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:Dock}, ResourceId={x:Static local:ComponentResourceIds.DockBackground}}}"
                                            DockWindow="{Binding RelativeSource={RelativeSource AncestorType=local:DockWindow}}" />

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Dock.IsBeingDragged}" Value="True">
                <Setter Property="Opacity" Value="0.5"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
